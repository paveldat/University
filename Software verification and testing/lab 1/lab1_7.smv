MODULE User(auth)
VAR
status: { NonCritical, Trying, Critical };
ASSIGN
init(status) := NonCritical;
next(status) :=
case
status = NonCritical : { NonCritical, Trying };
status = Trying :
case
next(auth) = FALSE : Trying;
next(auth) = TRUE : Critical;
esac;
status = Critical : { Critical, NonCritical};
esac;
VAR
req: boolean;
ASSIGN
req := status in { Trying, Critical };
FAIRNESS
status != Critical
--------------------------------------------------
---- The Arbiter ---------------------------------
--------------------------------------------------
MODULE Arbiter(req0, req1, req2)
VAR 
auth0: boolean;
ASSIGN
init(auth0) := FALSE;
next(auth0) := req0 & !auth1 & !auth2;
VAR 
auth1: boolean;
ASSIGN 
init(auth1) := FALSE;
next(auth1) := req1 & !next(auth0) & !auth2;
VAR
auth2: boolean;
ASSIGN
init(auth2) := FALSE;
next(auth2) := req2 & !next(auth0) & !next(auth1);
--------------------------------------------------
---- The main module -----------------------------
--------------------------------------------------
MODULE main
VAR 
U0: User(Ar.auth0);  --- User 0
U1: User(Ar.auth1);  --- User 1
U2: User(Ar.auth2);  --- User 2
Ar: Arbiter(U0.req, U1.req, U2.req);   --- The arbiter

CTLSPEC AG !(U0.status = Critical & U1.status = Critical) | (U0.status = Critical & U2.status = Critical) | (U1.status = Critical & U2.status = Critical)

CTLSPEC AG (U0.status = Trying -> AF (U0.status = Critical)) & (U1.status = Trying -> AF (U1.status = Critical)) & (U2.status = Trying -> AF (U2.status = Critical)) 