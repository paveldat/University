MODULE User(auth)
VAR
status: { NonCritical, Trying, Critical };
ASSIGN
init(status) := NonCritical;
next(status) :=
case
status = NonCritical : { NonCritical, Trying };
status = Trying :
case
next(auth) = FALSE : Trying;
next(auth) = TRUE : Critical;
esac;
status = Critical : { Critical, NonCritical};
esac;
VAR
req: boolean;
ASSIGN
req := status in { Trying, Critical }; 
FAIRNESS
status != Critical
--------------------------------------------------
---- The Arbiter ---------------------------------
--------------------------------------------------
MODULE Arbiter(req0, req1)
VAR
auth0: boolean;
ASSIGN
init(auth0) := FALSE;
next(auth0) := req0 & !auth1;
VAR
auth1: boolean;
ASSIGN
init(auth1) := FALSE;
next(auth1) := req1 & !next(auth0);
--------------------------------------------------
---- The main module -----------------------------
--------------------------------------------------
MODULE main
VAR
U0: User(Ar.auth0); --- User 0
U1: User(Ar.auth1); --- User 1
Ar: Arbiter(U0.req, U1.req); 

CTLSPEC AG !(U0.status=Critical & U1.status=Critical)
CTLSPEC AG (U0.status = Trying -> AF(U0.status = Critical)) & (U1.status = Trying -> AF(U1.status = Critical))